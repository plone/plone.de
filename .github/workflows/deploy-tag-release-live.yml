name: Release and deploy tag to live website plone.de

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

env:
  IMAGE_NAME_PREFIX: ghcr.io/plone/plone.de
  PYTHON_VERSION: "3.12"
  STACK_NAME: plone-de
  STACK_PREFIX: plonede
  PUBLIC_URL: plone.de
  CERTRESOLVER: le-cloudflare
  STACK_FILE: devops/stacks/plone.de.yml

jobs:

  meta:
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.vars.outputs.TAG }}
      VOLTO_VERSION: ${{ steps.vars.outputs.VOLTO_VERSION }}
      PLONE_VERSION: ${{ steps.vars.outputs.PLONE_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set Env Vars
        id: vars
        run: |
          echo "TAG=$(cat version.txt)" >> $GITHUB_OUTPUT
          python3 -c 'import json; data = json.load(open("frontend/package.json")); print("VOLTO_VERSION=" + data["dependencies"]["@plone/volto"])' >> $GITHUB_OUTPUT
          echo "PLONE_VERSION=$(cat backend/version.txt)" >> $GITHUB_OUTPUT
      - name: Test vars
        run: |
          echo "TAG=${{ steps.vars.outputs.TAG }}"
          echo "VOLTO_VERSION=${{ steps.vars.outputs.VOLTO_VERSION }}"
          echo "PLONE_VERSION=${{ steps.vars.outputs.PLONE_VERSION }}"

  release-frontend:
    runs-on: ubuntu-latest
    needs:
      - meta
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME_PREFIX }}-frontend
          flavor: |
            latest=false
          tags: |
            type=ref,event=branch
            type=pep440,pattern={{version}}
            type=sha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64
          context: frontend
          file: frontend/Dockerfile
          build-args: |
            VOLTO_VERSION=${{ needs.meta.outputs.VOLTO_VERSION }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  release-backend:
    runs-on: ubuntu-latest
    needs:
      - meta
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.IMAGE_NAME_PREFIX }}-backend
          flavor: |
            latest=false
          tags: |
            type=ref,event=branch
            type=pep440,pattern={{version}}
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64
          context: backend
          file: backend/Dockerfile
          build-args: |
            PLONE_VERSION=${{ needs.meta.outputs.PLONE_VERSION }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    concurrency: deploy
    runs-on: ubuntu-latest
    needs:
      - meta
      - release-backend
      - release-frontend
    environment:
      name: plone.de
      url: https://plone.de
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to clustera
        uses: kitconcept/docker-stack-deploy@v1.2.0
        with:
          registry: 'ghcr.io'
          username: ${{ github.actor }}
          password: ${{ secrets.DEPLOY_GHCR_READ_TOKEN }}
          remote_host: ${{ vars.DEPLOY_HOST }}
          remote_port: ${{ vars.DEPLOY_PORT }}
          remote_user: ${{ vars.DEPLOY_USER }}
          remote_private_key: ${{ secrets.DEPLOY_SSH }}
          stack_file: ${{ env.STACK_FILE }}
          stack_name: ${{ env.STACK_NAME }}
          stack_param: ${{ needs.meta.outputs.TAG }}
          env_file: |
            STACK_NAME=${{ env.STACK_NAME }}
            STACK_PREFIX=${{ env.STACK_PREFIX }}
            PUBLIC_URL=${{ env.PUBLIC_URL }}
            CERTRESOLVER=${{ env.CERTRESOLVER }}
            BACKEND_IMAGE=${{ env.IMAGE_NAME_PREFIX }}-backend
            FRONTEND_IMAGE=${{ env.IMAGE_NAME_PREFIX }}-frontend
            DB_HOST=${{ vars.DB_HOST }}
            DB_PORT=${{ vars.DB_PORT }}
            DB_NAME=${{ vars.DB_NAME }}
            DB_USER=${{ vars.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            BASIC_AUTH_USER=${{ vars.BASIC_AUTH_USER }}
            BASIC_AUTH_PASSWORD=${{ vars.BASIC_AUTH_PASSWORD }}
          deploy_timeout: 480
